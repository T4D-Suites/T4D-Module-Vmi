#### MODULE HEADER BLOC
#
#   - Name:
#       vmi
###
#   - Synopsis:
#       One-line description of what it does. (less than 55 char)
###
#   - Prefix:
#       _t4dModVmi
###
#   - Error Code:
#       360
###
#  -  Supported Platform:
#       * OSX ( 10.12.6 or higher )
#       * Fedora ( 25 or higher )
###
#  -  Author(s):
#       Quentin NIO
#
###
#### HEADER BLOC ####

T4D_MOD_VMI_ROOT="$T4D_MODULES_PATH/vmi"
T4D_MOD_VMI_LOG_PATH="$T4D_MODULES_PATH/vmi/.t4d"

for _file in $(find $T4D_MOD_VMI_ROOT/_t4d_ -maxdepth 2 -type f | grep '.env$'); do
    # _t4dDebugLog "> $plog" "$_file"
    source $_file
done

vmi(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### vmi
#   - Name:
#       vmi : virtual management interface
###
#   - Synopsis:
#       Multi provider manager
###
#   - Definition:
#       VMI is a tools that will provide utilitary for admin to quickly have status on their virtual environments
#
#       ยง You may manage your different providers by using options like
#           1. add
#           2. list
#           3. remove
#
#       ยง Once your providers added you may want to sync vmi with your provider in order to feed vmi's index
#           1. vmi sync
#
#       ยง You may list all instances by using <vmi> and even add filter as argument
#           1. vmi aws
#
#       ยง At any moment you will be able to execute actions on your querry.
#       $ For exemple by adding -<action> at the end of your querry
#           1. vmi aws -data
#
###
#   - Usage:
#       * vmi <option>  [arguments]
#           Will execute vmi command with all arguments
#       * vmi help <option>       
#           Show specific option's documentation 
#
###
#   - Options:
#
###
#   - Example:
#       * vmi add serv1 -t aws -region eu-west-3  -f           = adding serv1 to config file
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local CHPWD=1
    local _t4dVmiError=360
    T4D_MOD_VMI_HV_FILE="${WS_VMI_HV_FILE:-$T4D_MOD_VMI_LOG_PATH/config.xml}"

    mkdir -p $T4D_PROJECT_LOG_PATH/vmi
     if [[ "$1" != "help" ]] && [[ "$(echo $@ | grep '\-data')" == "" ]]; then
         _t4dModVmiLogo main
     fi
     (set -e
         case $1 in
            sync)               _t4dModVmiSync ${@:2}                   ;;
            add)                _t4dModVmiAdd ${@:2}                    ;;
            list)               _t4dModVmiList ${@:2}                   ;;
            remove)             _t4dModVmiRemove ${@:2}                 ;;
            help)               _t4dModVmiHelp ${@:2}                   ;;
            *)                  _t4dModVmiMain ${@}                     ;;
         esac
     )
     #ALL COMMAND ARE LAUNCHED IN A SUBSHELL
     #This is here to stop command at the first untracked error
     #We Also need to check the subshell output in order to identified which kind of error is sent
     if [[ "$?" == "0" ]]; then
         _t4dVmiError="0"
     fi
     return $_t4dVmiError
###############################
}

#AUTO COMPLETION
 _vmi(){
    local cur prev opts
    local _name='vmi'
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    option="${COMP_WORDS[1]}"
    if [[ -e $T4D_MODULES_PATH/${_name}/.ressources/completions/${_name} ]]; then
        if [[ ${prev} == "${_name}" ]] || [[ ${prev} == "help" ]] ; then
            opts="$(cat $T4D_MODULES_PATH/${_name}/.ressources/completions/${_name})"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
        # elif [[ -e "$T4D_MODULES_PATH/${_name}/.ressources/completions/${_name}-module/${option}" ]]; then
        #     opts="$(cat $T4D_MODULES_PATH/${_name}/.ressources/completions/${_name}-module/${option})"
        #     COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        #     return 0
        else
            opts="$(_t4dModVmiCompletions ${option} ${prev})"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
        fi
    
    fi
 }

_t4dModVmiHelp(){
###### _t4dModVmiHelp
#   - Name:
#       _t4dModVmiHelp
###
#   - Synopsis:
#       Show Module Documentation
###
#   - Definition:
#       Parse module Header to show user a ready to read shell documentation
###
###### DOCUMENTATION BLOC ##### 
########### CODE BLOC #########
    local _Internal="${2:-shell}"
    local _Module='vmi'
    local _MainContent="$(_t4dDocGetFunctionContent ${_Module})"
    if [[ "$_Internal" == "-no-shell" ]]; then
        echo $_MainContent
    elif [[ $# -eq 1 ]] && [[ "$(_t4dDocGetOptionsList "$_MainContent" | grep "^$1")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_MainContent" $1)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|$_Module $1|g"
    elif [[ "$1" == "" ]] || [[ "$1" == "${_Module}" ]]; then
        _t4dModVmiLogo doc
        t4dHelp -no-logo ${_Module}
    else
        t4dHelp $@
    fi
    echo ""
    echo ""
    echo ""
}
###############################

_t4dModVmiLogo(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-module.env
# v1.8.0
###### _t4dModVmiLogo
#   - Name:
#       _t4dModVmiLogo
###
#   - Synopsis:
#       Show Ascii Module logo art
###
##### DOCUMENTATION BLOC #####
########### CODE BLOC #########
     local _color=${1:-$plcyan}
     hashL1="##      ##     #####      ###### "
     hashL2="###    ###   ##    ##    ##    ##"
     hashL3="## #### ##  ##     ##   ##     ##"
     hashL4="##  ##  ##  ##    ##   ##     ## "
     hashL5="##      ##   #####    ########   "
     if [[ "$_T4D_QUIET_MODE" == "true" ]]; then
         #DoNothing
     elif [[ "$1" == "doc" ]]; then
         local _Content="${hashL1}%${hashL2}%${hashL3}%${hashL4}%${hashL5}"
         _t4dDocWks ${_Content} ${pired}
     elif [[ "$1" == "main" ]]; then
         local center="$(_t4dPromptCenterSpace "58" | sed "s|-||g")"
         echo "${center}${plcyan}##########################################################"
         echo          "${center}#################                         ################"
         echo          "${center}#########                  Modules    _           ########"
         echo          "${center}######           __      __          (_)            ######"
         echo          "${center}####             \ \    / /_ __ ___   _               ####"
         echo          "${center}###               \ \  / /| '_ | _ \ | |               ###"
         echo          "${center}###                \ \/ / | | | | | || |               ###"
         echo          "${center}###                 \__/  |_| |_| |_||_|               ###"

         _t4dPromptEmptyCenter 26
         _t4dPromptEmptyCenter 26
         _t4dPromptEmptyCenter 26
         echo "$pstd"
     else
         local center="$(_t4dPromptCenterSpace "${\#l5}" | sed "s|-||g")"
         echo "${center}${_color} $hashL1 ${pstd}"
         echo "${center}${_color} $hashL2 ${pstd}"
         echo "${center}${_color} $hashL3 ${pstd}"
         echo "${center}${_color} $hashL4 ${pstd}"
         echo "${center}${_color} $hashL5 ${pstd}"
         echo ""
     fi
}
###############################
