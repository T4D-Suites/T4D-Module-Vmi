_t4dModVmiAwsSync(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dModVmiAwsSync
#   - Name:
#       _t4dModVmiAwsSync
###
#   - Synopsis:
#       generate xml file in index using remote input
###
#   - Usage:
#       * {Name} <option>  [arguments]        = {One-Line Description}
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _HypervisorAws=$(_t4dManifestXmlGetMarker aws name $T4D_MOD_VMI_HV_FILE)
    local _HostFilePath="$T4D_MOD_VMI_LOG_PATH/aws"

    mkdir -p $_HostFilePath > /dev/null

    for _region in $(echo $_HypervisorAws); do
        _t4dPromptSquare "Aws - $_region" $plblue
        _t4dSrcAwsEc2Get $_region -o xml > $_HostFilePath/${_region}.xml
    done

    # _t4dVmiAwsGetCompletionStatus
###############################
}

_t4dModVmiAwsSecurityCheck(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dModVmiAwsSecurityCheck
#   - Name:
#       _t4dModVmiAwsSecurityCheck
###
#   - Synopsis:
#       security check for aws
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    if [[ -e "$(command -v aws)" ]] ; then
        echo "true"
    else
        echo "false"
    fi

###############################
}

_t4dModVmiAwsStatus(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dModVmiAwsStatus
#   - Name:
#       _t4dModVmiAwsStatus
###
#   - Synopsis:
#       Print aws ec2 instance status
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1

    local _Id="$1"
    local _Zone="$2"
    local _Name="$3"

    _t4dPromptSquare "$_Name" $plblue

    local _res=$(_t4dSrcAwsEc2InstanceAllList --instance-ids $_Id)
    local _OutputJsonFile="${T4D_PROJECT_LOG_PATH}/_wksEc2InstanceStatus.json"
    local _OutputJsonTxt="${T4D_PROJECT_LOG_PATH}/_wksEc2InstanceArgState.txt"

    echo $_res > $_OutputJsonFile
    echo "" > $_OutputJsonTxt

    local _Sg="$(_t4dGetJsonData $_OutputJsonFile  ".Reservations[].Instances[].NetworkInterfaces[].Groups[].GroupId")"
    local _Sn="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].NetworkInterfaces[].SubnetId")"


    _t4dPromptObjectCenter "$(_t4dPromptSquare --no-color "$_Name\nID - $_Id\nSecurity Group - $_Sg\nSubnetID - $_Sn")" $plpurple

    local _Status="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].State.Name")"
    local _Type="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].InstanceType")"
    local _Platform="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].PlatformDetails")"
    local _Zone="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].Placement.AvailabilityZone")"
    local _Tags="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].Tags" | sed 'y/{}[],/     /' | grep -v '^ *$')"

    _t4dPromptInfo "Type"       "$_Type"          17 ":" $plblue
    _t4dPromptInfo "Zone"       "$_Zone"          17 ":" $plblue
    _t4dPromptInfo "Status"     "$_Status"        17 ":" $plblue
    _t4dPromptInfo "Platform"   "$_Platform"      17 ":" $plblue
    _t4dPromptInfo "Tags"       "$_Tags"          17 ":" $plblue
    echo " "
    _t4dPromptLine

    for _Arg in "${@:4}"
    do
        local _Line="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].${_Arg}")"

        echo " \"$_Arg\"=\"$_Line\"" >> $_OutputJsonTxt
    done

    _t4dPromptObjectCenter "$(cat $_OutputJsonTxt)"

    _t4dPromptLine

    local _Mac="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].NetworkInterfaces[].MacAddress")"
    local _Ip="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].NetworkInterfaces[].PrivateIpAddress")"
    local _Dns="$(_t4dGetJsonData $_OutputJsonFile ".Reservations[].Instances[].NetworkInterfaces[].Association.PublicDnsName")"

    _t4dPromptObjectEndOfLine "$(_t4dPromptSquare --no-color "Mac - $_Mac\nIp - $_Ip\nDns - $_Dns")" $plcyan

###############################
}

_t4dModVmiAwsChangeState(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _t4dModVmiAwsChangeState
#   - Name:
#       _t4dModVmiAwsChangeState
###
#   - Synopsis:
#       start, stop or reboot given instances remotely
###
#   - Usage:
#       * {Name} <option>  [arguments]        = {One-Line Description}
#
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1

   _t4dDebugLog $pinfo "_t4dModVmiAwsChangeState not defined yet"
###############################
}
